#!/usr/bin/env python

import os
import subprocess
import aiia.parse
import aiia.gpt

sh = lambda x: subprocess.run(
    x, capture_output=True, shell=True, executable="/bin/bash"
).stdout.decode("utf-8")

chat_logs_dir = os.path.expanduser("~/chat-logs")
chat_files = [
    os.path.join(chat_logs_dir, file)
    for file in os.listdir(chat_logs_dir)
    if file.endswith(".chat.md")
]

for file in chat_files:
    # if file empty skip
    if os.stat(file).st_size == 0:
        continue

    # if file only has whitespace or just blank newlines, skip
    with open(file, "r") as f:
        if all(line.strip() == "" for line in f.readlines()):
            continue

    contents = open(file, "r").read()
    data = aiia.parse.parse_chat_markdown(contents)
    title = data.get("metadata", {}).get("title", "Untitled")
    is_empty = (
        len([m for m in data.get("messages", []) if m.get("role") == "assistant"]) == 0
    )
    if is_empty:
        continue

    if title == "" or title == "Untitled":
        print(f"{file}")
        with open(file, "r") as f:
            header = "".join([f.readline() for _ in range(25)])

        p = os.path.expanduser("~/.local/share/prompts/summarize-chat-log.chat.md")
        with open(p) as f:
            template = f.read()

        prompt = template.format(chat_log=header)
        prompt_chat_log = aiia.parse.parse_chat_markdown(prompt)

        new_title = "".join(
            aiia.gpt.get_response(
                prompt_chat_log.get("messages", []),
                model=prompt_chat_log.get("metadata", {}).get("model", "gpt-3.5-turbo"),
            )
        )

        # strip an special characters
        new_title = new_title.strip().strip(";:\"'").strip()

        data["metadata"]["title"] = new_title
        formatted_data = aiia.parse.to_chat_markdown(data)

        with open(file, "w") as f:
            f.write(formatted_data)

        print(f" ->  {new_title}")
